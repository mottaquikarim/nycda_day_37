{"home":{"content":"# Auth w/JSON Web Tokens\n\nWelcome to **Lecture 37**! Here is a brief class breakdown.\n\n## Learning Objectives\n1. Practice / get comfortable with Passport\n2. Learn about JWT tokens, a stateless method of authentication\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [JWT Tokens](#jwt-tokens)","idx":0},"title":{"content":"Auth w/JSON Web Tokens","idx":1},"desc":{"content":"JSON Web Tokens, authentication, and you.","idx":2},"warmup":{"content":"# Warmup\n\nLet's begin with a few exercises.\n\nBefore you begin, please download **[this](https://github.com/mottaquikarim/Lecture37_warmups_nycda/)** github repo.\n\nYou will also want to reference **[this](https://github.com/mottaquikarim/Lecture36_nycda_passport_ex)** (from Lecture **36**) for an example of passport in action.\n\n## Exercise 1\n\nPlease complete **[this](https://github.com/mottaquikarim/Lecture37_warmups_nycda/tree/master/starter-local)** project. **README** will have all implementation details / requirements.\n\n## Exercise 2\n\nPlease complete **[this](https://github.com/mottaquikarim/Lecture37_warmups_nycda/tree/master/starter-github)** project. **README** will have all implementation details / requirements.\n\n## Exercise 3\n\nPlease complete **[this](https://github.com/mottaquikarim/Lecture37_warmups_nycda/tree/master/debug)** project. **README** will have all implementation details / requirements.\n\n","idx":3},"jwt-tokens":{"content":"# JWT Tokens\n\nLet us now learn about yet another way to implement authentication on server side.\n\nTo achieve this, we will use **[this](https://github.com/mottaquikarim/Lecture37_warmups_nycda/tree/master/starter-jwt)** starter project.\n\n## What is a JSON Web Token?\n\nJSON Web Tokens, or JWT tokens, are encoded strings that contain information about a user's authentication state.\n\nA typical JWT token will contain a series of **claims** that can be decoded by the server to verify certain properties of the user (ie: user email address, etc).\n\nThis string can then be stored on the frontend or in a httpOnly cookie by the server and validated **without** having to set a session.\n\n## How to Use\n\nHere is how you can get started with JWT tokens\n\n### Cookies\n\nFirst, grab the express cookie-parser middleware\n\n```bash\nnpm install --save cookie-parser\n```\n\nYou can use is as follows:\n\n```js\nconst express = require('express')\nconst cookieParser = require('cookie-parser')\n\nconst app = express()\napp.use(cookieParser())\n```\n\n**[Documentation](const)**\n\n### JWT Token Lib\n\n```bash\nnpm install jsonwebtoken --save\n```\n\nYou can sign a token as follows:\n\n```js\nconst jwt = require('jsonwebtoken');\n// create a token to expire in 30 seconds\nconst token = jwt.sign({ foo: 'bar', iat: Math.floor(Date.now() / 1000) + 30 }, 'shhhhh');\n```\n\n^^^ that token can then be stored in a cookie, etc.\n\nYou can decode a token as follows:\n\n```js\nconst decoded = jwt.verify(token, 'shhhhh');\nconsole.log(decoded.foo) // bar\n```\n\n**[Documentation](https://github.com/auth0/node-jsonwebtoken)**\n\n## Exercise\n\nBuild a simple metrocard app that uses JWT tokens to handle use auth / expiry. ","idx":4},"__list__":["home","title","desc","warmup","jwt-tokens"]}